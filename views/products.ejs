<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Quản lý sản phẩm</title>

    <!-- Google Font: Source Sans Pro -->
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback"
    />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="/plugins/fontawesome-free/css/all.min.css" />
    <!-- Ionicons -->
    <link
      rel="stylesheet"
      href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css"
    />
    <!-- Tempusdominus Bootstrap 4 -->
    <link
      rel="stylesheet"
      href="/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css"
    />
    <!-- iCheck -->
    <link
      rel="stylesheet"
      href="/plugins/icheck-bootstrap/icheck-bootstrap.min.css"
    />
    <!-- JQVMap -->
    <link rel="stylesheet" href="/plugins/jqvmap/jqvmap.min.css" />
    <!-- Theme style -->
    <link rel="stylesheet" href="/dist/css/adminlte.min.css" />
    <!-- overlayScrollbars -->
    <link
      rel="stylesheet"
      href="/plugins/overlayScrollbars/css/OverlayScrollbars.min.css"
    />
    <!-- Daterange picker -->
    <link
      rel="stylesheet"
      href="/plugins/daterangepicker/daterangepicker.css"
    />
    <!-- summernote -->
    <link rel="stylesheet" href="/plugins/summernote/summernote-bs4.min.css" />
    <!-- DataTables -->
    <link
      rel="stylesheet"
      href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css"
    />
    <script src="/scripts/products.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Select2 -->
    <link
      href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <link rel="stylesheet" href="path/to/bootstrap.min.css" />
    <style>
      /* CSS tùy chỉnh của bạn */
      #productFilterForm {
        margin-top: 10px;
        margin-left: 10px;
      }

      #productFilterForm input[type="text"],
      #productFilterForm select {
        padding: 8px 12px;
        margin: 5px;
        width: 220px;
        box-sizing: border-box;
        border-radius: 6px;
        border: 1px solid #ccc;
      }

      .product-filter-row {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        align-items: center;
        margin-bottom: 10px;
      }

      .product-filter-row select,
      .product-filter-row input[type="text"] {
        min-width: 180px;
        flex: 1;
      }

      /* CSS cho checkbox và label */
      .product-filter-checkboxes {
        margin-top: 10px;
        margin-left: 5px; /* Để căn chỉnh với các input khác */
      }

      .form-check {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
      }

      .form-check-input {
        margin-right: 0.5rem;
        /* Thêm các thuộc tính khác nếu cần, ví dụ: kích thước */
      }

      .form-check-label {
        /* Thêm các thuộc tính khác nếu cần, ví dụ: font-size */
      }

      /* Các CSS khác của bạn (clear button, limit select label, etc.) */
      .input-wrapper {
        position: relative;
        display: inline-block;
      }

      .clear-btn {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        border: none;
        background: none;
        cursor: pointer;
        font-weight: bold;
        color: red;
        display: none;
      }

      .input-wrapper input:not(:placeholder-shown) + .clear-btn {
        display: block;
      }

      .limit-select-label {
        font-size: 14px;
        margin-left: 10px;
        margin-top: 5px;
      }

      .product-filter-row select,
      .product-filter-row input[type="text"] {
        min-width: 150px;
      }
    </style>

    <style>
      #productsTable tbody tr:hover {
        background-color: #e2f0ff !important;
      }

      #productsTable,
      #productsTable th,
      #productsTable td {
        border: 1px solid #ccc !important;
      }

      #productsTable tbody tr:nth-child(odd) {
        background-color: #f9f9f9;
      }

      #productsTable tbody tr:nth-child(even) {
        background-color: #ffffff;
      }

      .pagination .page-link {
        font-size: 0.95rem;
        padding: 0.5rem 0.9rem;
        min-width: 38px;
        text-align: center;
      }

      .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
      }

      .user-panel .info {
        display: flex;
        justify-content: center; /* Canh giữa ngang */
        align-items: center; /* Canh giữa dọc */
        height: 100%; /* Đảm bảo phần tử con chiếm hết chiều cao */
      }

      .user-panel .admin-name {
        font-size: 24px; /* Tăng kích thước chữ */
        font-weight: bold; /* In đậm */
        color: white; /* Chữ màu trắng */
      }

      /* Modal nền */
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
        justify-content: center;
        align-items: center;
      }

      /* Nội dung modal */
      .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        width: 50%;
        position: relative;
      }

      /* Nút đóng */
      .close {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 20px;
        cursor: pointer;
      }
    </style>
  </head>
  <body class="hold-transition sidebar-mini layout-fixed">
    <div class="wrapper">
      <!-- Preloader -->
      <div
        class="preloader flex-column justify-content-center align-items-center"
      >
        <img
          class="animation__shake"
          src="/uploads/logo.png"
          alt="AdminLTELogo"
          height="60"
          width="60"
        />
      </div>

      <!-- Navbar -->
      <nav class="main-header navbar navbar-expand navbar-white navbar-light">
        <!-- Left navbar links -->
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" data-widget="pushmenu" href="#" role="button"
              ><i class="fas fa-bars"></i
            ></a>
          </li>
          <li class="nav-item d-none d-sm-inline-block">
            <a href="/v1/dashboard/" class="nav-link">Trang chủ</a>
          </li>
          <li class="nav-item">
            <a id="chat-tab-btn" href="/v1/dashboard/chat" class="nav-link"
              >Phản Hồi</a
            >
          </li>
        </ul>

        <!-- Right navbar links -->
        <ul class="navbar-nav ml-auto">
          <!-- Navbar Search -->
          <li class="nav-item">
            <a
              class="nav-link"
              data-widget="navbar-search"
              href="#"
              role="button"
            >
              <i class="fas fa-search"></i>
            </a>
            <div class="navbar-search-block">
              <form class="form-inline">
                <div class="input-group input-group-sm">
                  <input
                    class="form-control form-control-navbar"
                    type="search"
                    placeholder="Search"
                    aria-label="Search"
                  />
                  <div class="input-group-append">
                    <button class="btn btn-navbar" type="submit">
                      <i class="fas fa-search"></i>
                    </button>
                    <button
                      class="btn btn-navbar"
                      type="button"
                      data-widget="navbar-search"
                    >
                      <i class="fas fa-times"></i>
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </li>
          <!-- Notifications Dropdown Menu -->
          <li id="nav-notif" class="nav-item dropdown">
            <a
              class="nav-link"
              data-toggle="dropdown"
              href="#"
              aria-expanded="false"
            >
              <i class="far fa-bell"></i>
              <span id="notif-badge" class="badge badge-warning navbar-badge"
                >0</span
              >
            </a>
            <div
              id="notif-menu"
              class="dropdown-menu dropdown-menu-lg dropdown-menu-right p-0"
            >
              <div class="px-3 py-2 border-bottom">
                <strong id="notif-header">0 Notifications</strong>
              </div>
              <div
                id="notif-items"
                style="max-height: 300px; overflow-y: auto"
              ></div>
              <div class="dropdown-divider m-0"></div>
              <a href="#" id="mark-all-read" class="dropdown-item text-center"
                >Đánh dấu tất cả là đã đọc</a
              >
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" data-widget="fullscreen" href="#" role="button">
              <i class="fas fa-expand-arrows-alt"></i>
            </a>
          </li>
          <li class="nav-item">
            <a
              class="nav-link"
              data-widget="control-sidebar"
              data-controlsidebar-slide="true"
              href="#"
              role="button"
            >
              <i class="fas fa-th-large"></i>
            </a>
          </li>
        </ul>
      </nav>
      <!-- /.navbar -->

      <!-- Main Sidebar Container -->
      <aside class="main-sidebar sidebar-dark-primary elevation-4">
        <!-- Brand Logo -->
        <a class="brand-link">
          <img
            src="/uploads/logo.png"
            alt="Admin Logo"
            class="brand-image img-circle elevation-3 bg-white"
            style="max-width: 150px"
          />
          <span class="brand-text font-weight-light">Clothique</span>
        </a>

        <!-- Sidebar -->
        <div class="sidebar">
          <!-- Sidebar user panel (optional) -->
          <div class="user-panel mt-3 pb-3 mb-3 d-flex">
            <div class="info">
              <div class="admin-name">Chủ Cửa Hàng</div>
            </div>
          </div>

          <!-- Sidebar Menu -->
          <nav class="mt-2">
            <ul
              class="nav nav-pills nav-sidebar flex-column"
              data-widget="treeview"
              role="menu"
              data-accordion="false"
            >
              <!-- Add icons to the links using the .nav-icon class
               with font-awesome or any other icon font library -->

          <li class="nav-item menu-open">
            <a href="#" class="nav-link active">
              <i class="nav-icon fas fa-tachometer-alt"></i>
              <p>
                Trung Tâm Điều Khiển
                <i class="right fas fa-angle-left"></i>
              </p>
            </a>
            <ul class="nav nav-treeview">
              <li class="nav-item">
                <a href="/v1/dashboard/products" class="nav-link <%= currentPath === '/products' ? 'active' : '' %>">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý sản phẩm</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/categories" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý loại sản phẩm</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/orders" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý đơn hàng</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/transactions" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý hóa đơn</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/coupons"
                  class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý mã giảm giá</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/users" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý người dùng</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/comment" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý bình luận</p>
                </a>
              </li>
            </ul>
          </li>
          <li class="nav-item">
            <a href="#" class="nav-link text-white">
              <i class="nav-icon fas fa-user"></i>
              <p>
                Tài Khoản
                <i class="right fas fa-angle-left"></i>
              </p>
            </a>
            <ul class="nav nav-treeview">
              <li class="nav-item">
                <a href="/v1/dashboard/logout" class="nav-link text-danger">
                  <i class="nav-icon fas fa-sign-out-alt"></i>
                  <p>Đăng xuất</p>
                </a>
              </li>
            </ul>
          </li>
      </nav>
      <!-- /.sidebar-menu -->
    </div>
    <!-- /.sidebar -->
  </aside>

      <!-- Content Wrapper. Contains page content -->
      <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <div class="content-header">
          <div class="container-fluid">
            <div class="row mb-2">
              <div class="col-sm-6"></div>
            </div>
          </div>
        </div>
        <section class="content">
          <div class="container-fluid">
            <!-- Header có tiêu đề + nút thêm sản phẩm -->
            <div
              class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2"
            >
              <h2 class="mb-0">Danh sách sản phẩm</h2>
              <button id="openModal" class="btn btn-primary">
                <i class="fas fa-plus"></i> Thêm Sản Phẩm
              </button>
            </div>

            <form id="productFilterForm">
              <div class="product-filter-row">
                <input
                  type="text"
                  id="searchInput"
                  placeholder="Tìm theo tên sản phẩm..."
                />
                <select id="category">
                  <option value="">Tất cả danh mục</option>
                </select>
                <select id="visibilityFilter">
                  <option value="">Tất cả trạng thái</option>
                  <option value="visible">Hiển thị</option>
                  <option value="hidden">Đã ẩn</option>
                </select>
                <select id="sortBy">
                  <option value="desc">Mới nhất</option>
                  <option value="asc">Cũ nhất</option>
                </select>
                <div class="input-wrapper">
                  <span class="limit-select-label">Hiển thị</span>
                  <select id="limitSelect">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                  </select>
                </div>
              </div>

              <div class="product-filter-checkboxes">
                <div class="form-check">
                  <input
                    type="checkbox"
                    id="filterOutOfStock"
                    class="form-check-input"
                  />
                  <label class="form-check-label" for="filterOutOfStock"
                    >Sản phẩm hết hàng</label
                  >
                </div>

                <div class="form-check">
                  <input
                    type="checkbox"
                    id="filterNoVariants"
                    class="form-check-input"
                  />
                  <label class="form-check-label" for="filterNoVariants"
                    >Sản phẩm không có biến thể</label
                  >
                </div>
              </div>
            </form>

            <table
              id="productsTable"
              class="display table table-striped table-bordered"
              style="width: 100%"
            >
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Tên sản phẩm</th>
                  <th>Loại sản phẩm</th>
                  <th>Biến thể</th>
                  <th>Tổng đã bán</th>
                  <th>Trạng thái ẩn</th>
                  <th>Hành động</th>
                </tr>
              </thead>
              <tbody id="productsTableBody">
                <!-- JS sẽ inject các hàng sản phẩm ở đây -->
              </tbody>
            </table>
            <div id="pagination" class="mt-3 d-flex justify-content-center">
              <nav aria-label="Page navigation">
                <ul id="paginationControls" class="pagination m-0"></ul>
              </nav>
            </div>
          </div>
          <div style="padding-bottom: 1rem"></div>
        </section>

        <div id="myModal" class="modal">
          <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Thêm sản phẩm mới</h2>
            <form id="addProductForm">
              <div class="form-group">
                <label for="name">Tên:</label>
                <input
                  type="text"
                  id="name"
                  class="form-control"
                  placeholder="Nhập tên sản phẩm"
                  required
                />
              </div>
              <div class="form-group">
                <label for="description">Mô tả:</label>
                <textarea
                  id="description"
                  class="form-control"
                  placeholder="Nhập mô tả chi tiết"
                  required
                ></textarea>
              </div>
              <div class="form-group">
                <label for="category">Danh mục:</label>
                <select
                  id="categorySelectInModal"
                  class="form-control"
                  required
                >
                  <% if (categories.length > 0) { %> <%
                  categories.forEach(category => { %>
                  <option value="<%= category._id %>">
                    <%= category.name %>
                  </option>
                  <% }) %> <% } else { %>
                  <option disabled selected>Không có danh mục nào</option>
                  <% } %>
                </select>
              </div>
              <div style="display: flex; justify-content: center; width: 100%">
                <button
                  type="submit"
                  class="btn btn-primary"
                  style="width: 100%"
                >
                  Thêm
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Control Sidebar -->
      <aside class="control-sidebar control-sidebar-dark">
        <!-- Control sidebar content goes here -->
      </aside>
      <!-- /.control-sidebar -->
    </div>
    <!-- ./wrapper -->
    <script>
      // Điều khiển việc hiển thị phần chat khi click vào "Phản Hồi"
      document
        .querySelector('a[href="#chatSection"]')
        .addEventListener("click", function (e) {
          e.preventDefault(); // Ngừng hành động mặc định của link
          const chatSection = document.getElementById("chatSection");

          if (
            chatSection.style.display === "none" ||
            chatSection.style.display === ""
          ) {
            chatSection.style.display = "block"; // Hiển thị chat
          } else {
            chatSection.style.display = "none"; // Ẩn chat
          }
        });
    </script>
    <!-- jQuery -->
    <script src="/plugins/jquery/jquery.min.js"></script>
    <!-- jQuery UI 1.11.4 -->
    <script src="/plugins/jquery-ui/jquery-ui.min.js"></script>
    <!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
    <script>
      $.widget.bridge("uibutton", $.ui.button);
    </script>
    <!-- Bootstrap 4 -->
    <script src="/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- ChartJS -->
    <script src="/plugins/chart.js/Chart.min.js"></script>
    <!-- Sparkline -->
    <script src="/plugins/sparklines/sparkline.js"></script>
    <!-- JQVMap -->
    <script src="/plugins/jqvmap/jquery.vmap.min.js"></script>
    <script src="/plugins/jqvmap/maps/jquery.vmap.usa.js"></script>
    <!-- jQuery Knob Chart -->
    <script src="/plugins/jquery-knob/jquery.knob.min.js"></script>
    <!-- daterangepicker -->
    <script src="/plugins/moment/moment.min.js"></script>
    <script src="/plugins/daterangepicker/daterangepicker.js"></script>
    <!-- Tempusdominus Bootstrap 4 -->
    <script src="/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
    <!-- Summernote -->
    <script src="/plugins/summernote/summernote-bs4.min.js"></script>
    <!-- overlayScrollbars -->
    <script src="/plugins/overlayScrollbars/js/jquery.overlayScrollbars.min.js"></script>
    <!-- AdminLTE App -->
    <script src="/dist/js/adminlte.js"></script>
    <!-- DataTables -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script>
      let currentPage = 1; // trang hiện tại
      let currentLimit = 10; // mặc định là 10

      $("#productsTable").DataTable({
        order: [],
        language: {
          lengthMenu: "Hiển thị _MENU_ sản phẩm",
          zeroRecords: "Không tìm thấy sản phẩm nào",
          info: "Hiển thị _START_ đến _END_ của _TOTAL_ sản phẩm",
          infoEmpty: "Không có dữ liệu",
          search: "Tìm kiếm:",
          paginate: {
            first: "Đầu",
            last: "Cuối",
            next: "Tiếp",
            previous: "Trước",
          },
        },
      });
      console.log(
        "Tổng số dòng được thêm:",
        document.querySelectorAll("#productsTableBody tr").length
      );
    </script>
    <script>
      document
        .getElementById("openModal")
        .addEventListener("click", function () {
          document.getElementById("myModal").classList.add("show");
        });

      document.querySelector(".close").addEventListener("click", function () {
        document.getElementById("myModal").classList.remove("show");
      });
    </script>
    <script>
      document
        .getElementById("addProductForm")
        .addEventListener("submit", async function (event) {
          event.preventDefault(); // Ngăn trang reload khi submit

          // Lấy dữ liệu từ input
          const name = document.getElementById("name").value.trim();
          const description = document
            .getElementById("description")
            .value.trim();
          const category = document.getElementById(
            "categorySelectInModal"
          ).value;

          if (!name || !description) {
            alert("Vui lòng điền đầy đủ thông tin!");
            return;
          }

          console.log("Name:", name);
          console.log("Description:", description);
          console.log("Category:", category);

          // Tạo object dữ liệu để gửi
          const newProduct = {
            name,
            description,
            category,
          };

          try {
            const response = await fetch("/v1/product/add-product", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(newProduct),
            });

            if (response.ok) {
              alert("Thêm sản phẩm thành công!");
              document.getElementById("myModal").classList.remove("show");
              loadProducts(1);
            } else {
              alert("Thêm sản phẩm thất bại!");
            }
          } catch (error) {
            console.error("Lỗi:", error);
            alert("Đã xảy ra lỗi khi thêm sản phẩm!");
          }
        });

      $(document).ready(function () {
        function filterProducts() {
          let visibleRows = 0;

          $(".product-row").each(function () {
            let showRow = true;

            // Kiểm tra checkbox "Hiển thị sản phẩm hết hàng"
            if ($("#filterOutOfStock").prop("checked")) {
              if ($(this).attr("data-has-outofstock") !== "true") {
                showRow = false;
              }
            }

            // Kiểm tra checkbox "Hiển thị sản phẩm không có biến thể"
            if ($("#filterNoVariants").prop("checked")) {
              if ($(this).attr("data-no-variant") !== "true") {
                showRow = false;
              }
            }

            if (showRow) {
              $(this).show();
              visibleRows++;
            } else {
              $(this).hide();
            }
          });

          // Nếu không có sản phẩm nào, hiển thị thông báo
          if (visibleRows === 0) {
            $("#noProductsMessage").show();
          } else {
            $("#noProductsMessage").hide();
          }
        }

        // Gọi hàm lọc khi checkbox thay đổi
        $("#filterOutOfStock, #filterNoVariants").change(filterProducts);
      });

      function toggleProductVisibility(productId) {
        Swal.fire({
          title: "Ẩn sản phẩm?",
          text: "Aruji-sama có chắc muốn ẩn sản phẩm này không?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "Có, ẩn đi!",
          cancelButtonText: "Không",
          reverseButtons: true,
        }).then((result) => {
          if (result.isConfirmed) {
            fetch(`/v1/product/hide-product/${productId}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            })
              .then((res) => res.json())
              .then((data) => {
                if (data.success) {
                  Swal.fire({
                    title: "Đã ẩn!",
                    text: "Sản phẩm đã được ẩn thành công, Aruji-sama!",
                    icon: "success",
                    timer: 1200,
                    showConfirmButton: false,
                  });

                  setTimeout(() => {
                    loadProducts(currentPage); // gọi lại API lấy danh sách sản phẩm
                  }, 1500);
                } else {
                  Swal.fire("Thất bại", "Không thể ẩn sản phẩm!", "error");
                }
              })
              .catch((err) => {
                console.error(err);
                Swal.fire("Lỗi", "Đã xảy ra lỗi khi ẩn sản phẩm!", "error");
              });
          }
        });
      }

      function loadProducts(page = 1) {
        currentPage = page; // Cập nhật trang hiện tại
        const outOfStock = document.getElementById("filterOutOfStock").checked;
        const noVariants = document.getElementById("filterNoVariants").checked;
        const keyword = document.getElementById("searchInput")?.value || "";
        const category = document.getElementById("category")?.value || "";
        const visibility =
          document.getElementById("visibilityFilter")?.value || "";
        const sortBy = document.getElementById("sortBy")?.value || "desc";
        fetch(
          `/v1/product/getAllProductsForAdmin?page=${page}&limit=${currentLimit}&outOfStock=${outOfStock}&noVariants=${noVariants}&keyword=${encodeURIComponent(
            keyword
          )}&category=${category}&visibility=${visibility}&sortBy=${sortBy}`
        )
          .then((res) => {
            if (!res.ok) throw new Error("Fetch failed");
            return res.json();
          })
          .then((data) => {
            const products = data.products; // Lấy đúng mảng sản phẩm ra
            console.log(products);
            
            const table = $("#productsTable").DataTable();

            if ($.fn.DataTable.isDataTable("#productsTable")) {
              table.clear().destroy();
            }

            const tbody = document.querySelector("#productsTableBody");
            tbody.innerHTML = "";

            products.forEach((product) => {
              const totalSold = product.variants.reduce(
                (sum, v) => sum + (v.soldQuantity || 0),
                0
              );
              const variantList =
                product.variants.length > 0
                  ? `<ul class="list-unstyled">
            ${product.variants
              .map(
                (v) =>
                  `<li>
              <strong>Size:</strong> ${v.size},
              <strong>Màu:</strong> ${v.color},
              <strong>Giá nhập:</strong> ${v.importPrice ? v.importPrice + "đ" : "-"},
              <strong>Giá bán:</strong> ${v.salePrice ? v.salePrice + "đ" : "-"},
              <strong>Kho:</strong> ${v.stock},
              <strong>Đã bán:</strong> ${v.soldQuantity || 0}
              </li>`
              )
              .join("")}
              </ul>`
                  : `<span class="text-muted">Không có biến thể</span>`;

              const row = document.createElement("tr");
              row.innerHTML = `
              <td>${product._id}</td>
              <td>${product.name}</td>
              <td>${product.category?.name || "Chưa có danh mục"}</td>
              <td>${variantList}</td>
              <td><strong>${totalSold}</strong></td>
              <td>
                <span class="badge ${
                  product.isHidden ? "bg-danger" : "bg-success"
                }">
                  ${product.isHidden ? "Đã ẩn" : "Hiển thị"}
                  </span>
                  </td>
                  <td>
                    <a href="/v1/dashboard/products/view/${
                      product._id
                    }" class="btn btn-info btn-sm">
                      <i class="fas fa-eye"></i> Xem
                      </a>
                      <a href="#" onclick="checkBeforeEdit('${
                        product._id
                      }')" class="btn btn-warning btn-sm">
                        <i class="fas fa-edit"></i> Sửa
                        </a>
                        ${
                          !product.isHidden
                            ? `<button class="btn btn-danger btn-sm" onclick="toggleProductVisibility('${product._id}', true)">
                          <i class="fas fa-eye-slash"></i> Ẩn
                          </button>`
                            : ""
                        }
                          </td>
                          `;
              tbody.appendChild(row);
            });

            $("#productsTable").DataTable({
              paging: false,
              searching: false,
              info: false,
              ordering: false,
            });

            renderPaginationControls(data.totalPages, data.currentPage);
          })
          .catch((err) => {
            console.error(err);
            Swal.fire("Lỗi!", "Không thể tải danh sách sản phẩm!", "error");
          });
      }

      function renderPaginationControls(totalPages, currentPage) {
        const container = document.getElementById("paginationControls");
        if (!container) return;
        container.innerHTML = "";

        const ul = document.createElement("ul");
        ul.className = "pagination m-0";

        const createPageItem = (
          label,
          page,
          disabled = false,
          active = false
        ) => {
          const li = document.createElement("li");
          li.className = `page-item${active ? " active" : ""}${
            disabled ? " disabled" : ""
          }`;

          const a = document.createElement("a");
          a.className = "page-link";
          a.href = "#";
          a.textContent = label;
          a.onclick = (e) => {
            e.preventDefault();
            if (!disabled && page !== currentPage) {
              loadProducts(page);
            }
          };

          li.appendChild(a);
          return li;
        };

        if (currentPage > 1) {
          ul.appendChild(createPageItem("«", 1));
        }

        let startPage = Math.max(1, currentPage - 1);
        let endPage = Math.min(totalPages, currentPage + 1);
        if (currentPage === 1) endPage = Math.min(3, totalPages);
        if (currentPage === totalPages) startPage = Math.max(1, totalPages - 2);

        for (let i = startPage; i <= endPage; i++) {
          ul.appendChild(createPageItem(i, i, false, i === currentPage));
        }

        if (currentPage < totalPages) {
          ul.appendChild(createPageItem("»", totalPages));
        }

        container.appendChild(ul);
      }

      function debounce(fn, delay) {
        let timeout;
        return function (...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => fn.apply(this, args), delay);
        };
      }
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const categorySelect = document.getElementById("category");

        // Gọi API để lấy danh sách danh mục
        fetch("/v1/category/")
          .then((res) => res.json())
          .then((data) => {
            const categories = data.categories || [];

            categories.forEach((cat) => {
              const option = document.createElement("option");
              option.value = cat._id;
              option.textContent = cat.name;
              categorySelect.appendChild(option);
            });
          })
          .catch((err) => {
            console.error("Không thể load danh mục:", err);
          });
        loadProducts(1); // Gọi hàm loadProducts khi trang được tải
      });
      document
        .getElementById("filterOutOfStock")
        .addEventListener("change", () => loadProducts(1));
      document
        .getElementById("filterNoVariants")
        .addEventListener("change", () => loadProducts(1));
      document.getElementById("searchInput").addEventListener(
        "input",
        debounce(() => loadProducts(1), 500)
      );
      document
        .getElementById("limitSelect")
        .addEventListener("change", function () {
          currentLimit = parseInt(this.value);
          loadProducts(1);
        });
      document
        .getElementById("sortBy")
        .addEventListener("change", () => loadProducts(1));
      document
        .getElementById("visibilityFilter")
        .addEventListener("change", () => loadProducts(1));
      document
        .getElementById("category")
        .addEventListener("change", () => loadProducts(1));
      document.addEventListener("DOMContentLoaded", () => {
        loadProducts(1);
      });
      async function checkBeforeEdit(productId) {
        try {
          const res = await fetch(`/v1/product/check-edit/${productId}`);
          const data = await res.json();
          console.log(data);

          if (data.canEdit) {
            // Nếu được phép sửa thì chuyển trang
            window.location.href = `/v1/dashboard/products/edit/${productId}`;
          } else {
            Swal.fire({
              icon: "error",
              title: "Không thể chỉnh sửa",
              text: "Sản phẩm này đã có người mua nên không thể chỉnh sửa!",
              confirmButtonText: "Đã hiểu",
            });
          }
        } catch (error) {
          console.error(error);
          alert("Có lỗi xảy ra, xin thử lại sau!");
        }
      }
    </script>
    <!-- CSS -->
    <style>
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
        justify-content: center;
        align-items: center;
        opacity: 0;
        transform: scale(0.9);
        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
      }

      .modal.show {
        display: flex;
        opacity: 1;
        transform: scale(1);
      }

      .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        width: 400px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        position: relative;
        animation: fadeIn 0.3s ease-in-out;
      }

      .close {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 20px;
        cursor: pointer;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: scale(0.95);
        }
        to {
          opacity: 1;
          transform: scale(1);
        }
      }

      .form-group {
        margin-bottom: 15px;
      }
    </style>
    <!-- Script Chat (tương tự code chat cũ) -->
    <script>
      const socket = io();
      const adminId = "admin";
      const adminUsername = "Admin";

      let selectedUser = null;
      let messages = {};
      let unreadUsers = {};
      let notifications = [];

      const chatUserList = document.getElementById("chat-user-list");
      const chatTitle = document.getElementById("chat-title");
      const chatContainer = document.getElementById("chat");
      const messageInput = document.getElementById("message-input");
      const sendButton = document.getElementById("send-btn");
      const notificationBadge = document.getElementById("notif-badge");
      const notifHeader = document.getElementById("notif-header");
      const notifItems = document.getElementById("notif-items");
      const markAllBtn = document.getElementById("mark-all-read");

      // --- LocalStorage helpers ---
      function getReadIds() {
        return JSON.parse(localStorage.getItem("readNotifications") || "[]");
      }
      function addReadId(id) {
        const arr = getReadIds();
        if (!arr.includes(id)) {
          arr.push(id);
          localStorage.setItem("readNotifications", JSON.stringify(arr));
        }
      }

      // --- Socket registration ---
      socket.emit("register", {
        userId: adminId,
        username: adminUsername,
        isAuthenticated: true,
      });
 // Khi có thông báo mới từ server (qua socket)
      socket.on("newNotification", (notification) => {
        // Kiểm tra trùng (ví dụ kiểm tra userId và timestamp)
        const exists = notifications.some(
          (n) =>
            n.userId === notification.userId &&
            new Date(n.timestamp).toISOString() ===
              new Date(notification.timestamp).toISOString()
        );
        if (!exists) {
          notifications.unshift(notification);
          updateBadge(); // cập nhật số lượng
          renderDropdown(); // cập nhật giao diện dropdown
        }
      });
      // --- Load & render notifications from server + localStorage flags ---
      async function loadNotifications() {
        const resp = await fetch("/v1/notifications");
        const notes = await resp.json();
        // sử dụng đúng flag read từ server
        notifications = notes.map((n) => ({
          _id: n._id,
          userId: n.userId,
          username: n.username,
          timestamp: new Date(n.createdAt).toLocaleString("vi-VN"),
          read: n.read, // lấy trực tiếp
        }));
        updateBadgeAndHeader()
        renderNotificationDropdown();
      }

      // thêm notification mới: POST trước, rồi unshift kết quả
      async function addNotification(n) {
        try {
          const resp = await fetch("/v1/notifications", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              userId: n.userId,
              username: n.username,
              title: "Tin nhắn mới",
              message: "Bạn có tin nhắn mới từ " + n.username,
              read: false,
            }),
          });
          const saved = await resp.json();
          // giờ mới thêm vào mảng
          notifications.unshift({
            _id: saved._id,
            userId: saved.userId,
            username: saved.username,
            timestamp: new Date(saved.createdAt).toLocaleString("vi-VN"),
            read: saved.read,
          });
          renderNotificationDropdown();
        } catch (err) {
          console.error("Failed to save notification:", err);
        }
      }

      // --- Cập nhật badge và header ---
      function updateBadgeAndHeader() {
        const unread = notifications.filter((n) => !n.read).length;
        notificationBadge.innerText = unread > 0 ? unread : "";
        notifHeader.innerText = `${unread} Notifications`;
      }

      // render và gán click
      function renderNotificationDropdown() {
        const unread = notifications.filter((n) => !n.read).length;
        notificationBadge.innerText = unread > 0 ? unread : "";
        notifHeader.innerText = `${unread} Notifications`;
        notifItems.innerHTML = notifications
          .map(
            (n, i) => `
    <a href="#" class="dropdown-item ${n.read ? "" : "bg-light"}"
       data-index="${i}"
       data-id="${n._id}"
       data-user-id="${n.userId}"
       data-username="${n.username}">
      <i class="fas fa-envelope mr-2"></i>
      <strong>${n.username}</strong> đã gửi tin nhắn mới
      <span class="float-right text-muted text-sm">${n.timestamp}</span>
    </a>
    <div class="dropdown-divider"></div>
  `
          )
          .join("");

        notifItems.querySelectorAll("a.dropdown-item").forEach((el) => {
          el.onclick = async (e) => {
            e.preventDefault();
            const idx = +el.dataset.index;
            const note = notifications[idx];
            const notifId = el.dataset.id;
            const userId = el.dataset.userId;
            const username = el.dataset.username;

            if (!note.read) {
              // đánh dấu trên server
              await fetch(`/v1/notifications/${notifId}`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ read: true }),
              });
              // cập nhật local
              note.read = true;
            }

            // chuyển sang chat
            document
              .getElementById("chat-tab-btn")
              .addEventListener("click", () => {
                // 1) local update ngay lập tức
                notifications.forEach((n) => (n.read = true));

                // 2) cập nhật badge + dropdown
                updateBadgeAndHeader();
                renderNotificationDropdown();

                // 3) sync lên server (PATCH) nhưng không block UI
                notifications
                  .filter((n) => n._id) // chỉ những đã có _id
                  .forEach((n) => {
                    fetch(`/v1/notifications/${n._id}`, {
                      method: "PATCH",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({ read: true }),
                    }).catch(console.error);
                  });
              });
            document.getElementById("chat-tab-btn").click();
            selectUser(userId, username);
            selectUser(userId, username);
            renderNotificationDropdown();
          };
        });
      }
      loadNotifications();
      // --- Chat user list & selection ---
      socket.on("updateUserList", (users) => {
        chatUserList.innerHTML = "<h3 class='mt-2'>User List</h3>";
        users
          .filter((u) => u.userId !== adminId)
          .forEach((u) => {
            const div = document.createElement("div");
            div.classList.add("user-item");
            div.dataset.id = u.userId;
            if (unreadUsers[u.userId]) div.classList.add("new-message");
            div.innerHTML = `<div class="user-info">${u.username}</div><button class="hide-btn">Ẩn</button>`;
            div.querySelector(".user-info").onclick = () =>
              selectUser(u.userId, u.username);
            div.querySelector(".hide-btn").onclick = () => {
              socket.emit("hideChatWithUser", u.userId);
              div.remove();
            };
            chatUserList.appendChild(div);
          });
      });

      async function markRead(idx) {
        try {
          const res = await fetch("/v1/notifications/markAsRead", {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id: notifications[idx]._id }),
          });
          if (!res.ok) throw new Error("Mark failed");
          const updated = await res.json();
          // SỬA: lấy luôn trạng thái read từ server để đồng nhất
          notifications[idx].read = !!(updated.read ?? updated.isRead);
        } catch (e) {
          console.error("❌ markRead:", e);
          // nếu lỗi, vẫn giữ client-side là đã đọc để khỏi nhảy badge
          notifications[idx].read = true;
        }
        await loadNotifications(); // đảm bảo đồng bộ dữ liệu
      }

      markAllBtn.onclick = async (e) => {
        e.preventDefault();
        try {
          const res = await fetch("/v1/notifications/mark-all-read", {
            method: "PUT",
          });
          if (!res.ok) throw new Error("Mark all failed");
          notifications.forEach((n) => (n.read = true));
          updateBadgeAndHeader();
          renderNotificationDropdown();
        } catch (e) {
          console.error("❌ mark-all-read:", e);
        }
      };
      function renderDropdown() {
        const unreadCount = notifications.filter((n) => !n.read).length;
        notifHeader.innerText = `${unreadCount} Notifications`;
        notifItems.innerHTML = notifications
          .map(
            (n, i) => `
      <a href="#" class="dropdown-item ${
        n.read ? "" : "bg-light"
      }" data-idx="${i}">
        <i class="fas fa-${
          n.type === "message"
            ? "envelope"
            : n.type === "comment"
            ? "comment"
            : "box"
        } mr-2"></i>
        <strong>${n.username}</strong> ${n.message}
        <span class="float-right text-muted text-sm">
          ${new Date(n.timestamp).toLocaleTimeString()}
        </span>
      </a>
      <div class="dropdown-divider"></div>
    `
          )
          .join("");

        notifItems.querySelectorAll("a.dropdown-item").forEach((el) => {
          el.onclick = async (e) => {
            e.preventDefault();
            const idx = +el.dataset.idx;
            if (!notifications[idx].read) {
              // gọi API để đánh dấu là đã đọc
              await markRead(idx);
              // và load lại để đảm bảo dữ liệu đồng bộ
              await loadNotifications();
            }
            const n = notifications[idx];
            selectUser(n.userId, n.username);
          };
        });
      }

      async function selectUser(id, name) {
        selectedUser = id;
        chatTitle.innerText = `Chat với ${name}`;
        chatContainer.innerHTML = "";
        delete unreadUsers[id];

        // Bỏ highlight new-message
        document
          .querySelector(`[data-id="${id}"]`)
          ?.classList.remove("new-message");

        // *** đánh dấu read ngay khi click user
        await markNotificationsReadForUser(id);

        // Hiển thị history nếu đã load
        if (messages[id]) renderMessages(id);
        // rồi fetch thêm nếu cần
        socket.emit("getMessages", id);
      }

      socket.on("chatHistory", ({ userId, messages: hist }) => {
        messages[userId] = hist;
        if (userId === selectedUser) renderMessages(userId);
      });

      async function markNotificationsReadForUser(userId) {
        // Lấy ra danh sách cần mark
        const toMark = notifications.filter(
          (n) => n.userId === userId && !n.read && n._id
        );
        if (toMark.length === 0) return;

        // -- 1) Optimistic update trên client --
        toMark.forEach((n) => (n.read = true));
        updateBadgeAndHeader();
        renderNotificationDropdown();

        // -- 2) Gửi PATCH song song để sync server --
        try {
          await Promise.all(
            toMark.map((n) =>
              fetch(`/v1/notifications/${n._id}`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ read: true }),
              })
            )
          );
        } catch (err) {
          console.error("Failed to patch notifications:", err);
        }
      }

      socket.on("receivePrivateMessage", (data) => {
        const senderId = data.sender;
        const senderName =
          senderId === adminId ? adminUsername : data.senderName;
        const chatPartner = senderId === adminId ? selectedUser : senderId;

        messages[chatPartner] = messages[chatPartner] || [];
        messages[chatPartner].push({
          senderName,
          message: data.message,
          timestamp: Date.now(),
        });

        if (selectedUser === chatPartner) {
          displayMessage(senderName, data.message);
        } else {
          unreadUsers[chatPartner] = true;
          document
            .querySelector(`[data-id="${chatPartner}"]`)
            ?.classList.add("new-message");
          // thêm notification
          addNotification({
            userId: senderId,
            username: senderName,
            timestamp: new Date().toLocaleString("vi-VN"),
          });
        }
      });

      // --- Thêm notification mới cả front+API ---
      async function addNotification(n) {
        const local = { ...n, read: false, _id: null };
        notifications.unshift(local);
        updateBadgeAndHeader();
        renderNotificationDropdown();

        try {
          const resp = await fetch("/v1/notifications", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              userId: n.userId,
              username: n.username,
              title: "Tin nhắn mới",
              message: "Bạn có tin nhắn mới từ " + n.username,
              read: false,
            }),
          });
          const saved = await resp.json();
          local._id = saved._id;
        } catch (err) {
          console.error("Failed to save notification:", err);
        }
      }

      // --- gửi tin nhắn từ admin ---
      sendButton.onclick = sendMessage;
      function sendMessage() {
        if (!selectedUser) return alert("Chọn một user để nhắn tin!");
        const msg = messageInput.value.trim();
        if (!msg) return;
        socket.emit("sendPrivateMessage", {
          sender: adminId,
          receiver: selectedUser,
          message: msg,
        });
        messages[selectedUser].push({
          senderName: adminUsername,
          message: msg,
          timestamp: Date.now(),
        });
        displayMessage(adminUsername, msg);
        messageInput.value = "";
      }

      function displayMessage(senderName, message) {
        const d = document.createElement("div");
        d.classList.add("message");
        d.innerHTML = `<strong>${senderName}:</strong> ${message}`;
        chatContainer.appendChild(d);
        chatContainer.scrollTop = chatContainer.scrollHeight;
      }
      function renderMessages(uid) {
        chatContainer.innerHTML = "";
        messages[uid].forEach((m) => displayMessage(m.senderName, m.message));
      }

      // toggle dropdown
      document
        .querySelector("#nav-notif .nav-link")
        .addEventListener("click", (e) => {
          e.preventDefault();
          const menu = document.querySelector("#notif-menu");
          menu.style.display =
            menu.style.display === "block" ? "none" : "block";
        });

      // initial load
      loadNotifications();
    </script>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      window.__ADMIN_ID__ = "<%= adminId %>";
      window.__ADMIN_NAME__ = "<%= adminName %>";
    </script>
    <script src="../public/global-notification.js"></script>
  </body>
</html>
