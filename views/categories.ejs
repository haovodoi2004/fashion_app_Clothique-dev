<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Quản lý loại sản phẩm</title>

    <!-- Google Font: Source Sans Pro -->
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback"
    />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="/plugins/fontawesome-free/css/all.min.css" />
    <!-- Ionicons -->
    <link
      rel="stylesheet"
      href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css"
    />
    <!-- Tempusdominus Bootstrap 4 -->
    <link
      rel="stylesheet"
      href="/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css"
    />
    <!-- iCheck -->
    <link
      rel="stylesheet"
      href="/plugins/icheck-bootstrap/icheck-bootstrap.min.css"
    />
    <!-- JQVMap -->
    <link rel="stylesheet" href="/plugins/jqvmap/jqvmap.min.css" />
    <!-- Theme style -->
    <link rel="stylesheet" href="/dist/css/adminlte.min.css" />
    <!-- overlayScrollbars -->
    <link
      rel="stylesheet"
      href="/plugins/overlayScrollbars/css/OverlayScrollbars.min.css"
    />
    <!-- Daterange picker -->
    <link
      rel="stylesheet"
      href="/plugins/daterangepicker/daterangepicker.css"
    />
    <!-- summernote -->
    <link rel="stylesheet" href="/plugins/summernote/summernote-bs4.min.css" />
    <script src="/socket.io/socket.io.js"></script>
    <script>
      window.__ADMIN_ID__ = "<%= adminId %>";
      window.__ADMIN_NAME__ = "<%= adminName %>";
    </script>
    <script src="../public/global-notification.js"></script>
    <style>
      .user-panel .info {
        display: flex;
        justify-content: center; /* Canh giữa ngang */
        align-items: center; /* Canh giữa dọc */
        height: 100%; /* Đảm bảo phần tử con chiếm hết chiều cao */
      }

      .user-panel .admin-name {
        font-size: 22px; /* Tăng kích thước chữ */
        font-weight: bold; /* In đậm */
        color: white; /* Chữ màu trắng */
      }
      body {
        background-color: #f4f6f9;
      }
      .card {
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      .btn {
        border-radius: 5px;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap4.min.css"
    />

    <!-- FontAwesome -->
    <script
      src="https://kit.fontawesome.com/a076d05399.js"
      crossorigin="anonymous"
    ></script>
  </head>
  <body class="hold-transition sidebar-mini layout-fixed">
    <div class="wrapper">
      <!-- Preloader -->
      <div
        class="preloader flex-column justify-content-center align-items-center"
      >
        <img
          class="animation__shake"
          src="/uploads/logo.png"
          alt="AdminLTELogo"
          height="60"
          width="60"
        />
      </div>

      <!-- Navbar -->
      <nav class="main-header navbar navbar-expand navbar-white navbar-light">
        <!-- Left navbar links -->
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" data-widget="pushmenu" href="#" role="button"
              ><i class="fas fa-bars"></i
            ></a>
          </li>
          <li class="nav-item d-none d-sm-inline-block">
            <a href="/v1/dashboard/" class="nav-link">Trang chủ</a>
          </li>
          <li class="nav-item">
            <a id="chat-tab-btn" href="/v1/dashboard/chat" class="nav-link"
              >Phản Hồi</a
            >
          </li>
        </ul>

        <!-- Right navbar links -->
        <ul class="navbar-nav ml-auto">
          <!-- Navbar Search -->
          <li class="nav-item">
            <a
              class="nav-link"
              data-widget="navbar-search"
              href="#"
              role="button"
            >
              <i class="fas fa-search"></i>
            </a>
            <div class="navbar-search-block">
              <form class="form-inline">
                <div class="input-group input-group-sm">
                  <input
                    class="form-control form-control-navbar"
                    type="search"
                    placeholder="Search"
                    aria-label="Search"
                  />
                  <div class="input-group-append">
                    <button class="btn btn-navbar" type="submit">
                      <i class="fas fa-search"></i>
                    </button>
                    <button
                      class="btn btn-navbar"
                      type="button"
                      data-widget="navbar-search"
                    >
                      <i class="fas fa-times"></i>
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </li>

          <!-- Notifications Dropdown Menu -->
          <li id="nav-notif" class="nav-item dropdown">
            <a
              class="nav-link"
              data-toggle="dropdown"
              href="#"
              aria-expanded="false"
            >
              <i class="far fa-bell"></i>
              <span id="notif-badge" class="badge badge-warning navbar-badge"
                >0</span
              >
            </a>
            <div
              id="notif-menu"
              class="dropdown-menu dropdown-menu-lg dropdown-menu-right p-0"
            >
              <div class="px-3 py-2 border-bottom">
                <strong id="notif-header">0 Notifications</strong>
              </div>
              <div
                id="notif-items"
                style="max-height: 300px; overflow-y: auto"
              ></div>
              <div class="dropdown-divider m-0"></div>
              <a href="#" id="mark-all-read" class="dropdown-item text-center"
                >Đánh dấu tất cả là đã đọc</a
              >
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" data-widget="fullscreen" href="#" role="button">
              <i class="fas fa-expand-arrows-alt"></i>
            </a>
          </li>
          <li class="nav-item">
            <a
              class="nav-link"
              data-widget="control-sidebar"
              data-controlsidebar-slide="true"
              href="#"
              role="button"
            >
              <i class="fas fa-th-large"></i>
            </a>
          </li>
        </ul>
      </nav>
      <!-- /.navbar -->

      <!-- Main Sidebar Container -->
      <aside class="main-sidebar sidebar-dark-primary elevation-4">
        <!-- Brand Logo -->
        <a class="brand-link">
          <img
            src="/uploads/logo.png"
            alt="Admin Logo"
            class="brand-image img-circle elevation-3 bg-white"
            style="max-width: 150px"
          />
          <span class="brand-text font-weight-light">Clothique</span>
        </a>

        <!-- Sidebar -->
        <div class="sidebar">
          <!-- Sidebar user panel (optional) -->
          <div class="user-panel mt-3 pb-3 mb-3 d-flex">
            <div class="info">
              <div class="admin-name">Chủ Cửa Hàng</div>
            </div>
          </div>

          <!-- Sidebar Menu -->
          <nav class="mt-2">
            <ul
              class="nav nav-pills nav-sidebar flex-column"
              data-widget="treeview"
              role="menu"
              data-accordion="false"
            >
              <!-- Add icons to the links using the .nav-icon class
               with font-awesome or any other icon font library -->

          <li class="nav-item menu-open">
            <a href="#" class="nav-link active">
              <i class="nav-icon fas fa-tachometer-alt"></i>
              <p>
                Trung Tâm Điều Khiển
                <i class="right fas fa-angle-left"></i>
              </p>
            </a>
            <ul class="nav nav-treeview">
              <li class="nav-item">
                <a href="/v1/dashboard/products" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý sản phẩm</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/categories" class="nav-link <%= currentPath === '/categories' ? 'active' : '' %>">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý loại sản phẩm</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/orders" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý đơn hàng</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/transactions" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý hóa đơn</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/coupons"
                  class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý mã giảm giá</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/users" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý người dùng</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/v1/dashboard/comment" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Quản lý bình luận</p>
                </a>
              </li>
            </ul>
          </li>
          <li class="nav-item">
            <a href="#" class="nav-link text-white">
              <i class="nav-icon fas fa-user"></i>
              <p>
                Tài Khoản
                <i class="right fas fa-angle-left"></i>
              </p>
            </a>
            <ul class="nav nav-treeview">
              <li class="nav-item">
                <a href="/v1/dashboard/logout" class="nav-link text-danger">
                  <i class="nav-icon fas fa-sign-out-alt"></i>
                  <p>Đăng xuất</p>
                </a>
              </li>
            </ul>
          </li>
      </nav>
      <!-- /.sidebar-menu -->
    </div>
    <!-- /.sidebar -->
  </aside>

      <!-- Content Wrapper. Contains page content -->
      <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <div class="content-header">
          <div class="container-fluid">
            <div class="row mb-2">
              <div class="col-sm-6"></div>
              <!-- /.col -->
            </div>
            <!-- /.row -->
          </div>
          <!-- /.container-fluid -->
        </div>
        <!-- /.content-header -->

        <section class="content">
          <div class="container-fluid">
            <div class="row">
              <div class="col-md-12">
                <!-- Card -->
                <div class="card">
                  <div
                    class="card-header bg-primary text-white d-flex justify-content-between align-items-center"
                  >
                    <h3 class="card-title">Quản lý Loại Sản Phẩm</h3>
                    <button
                      class="btn btn-light"
                      data-toggle="modal"
                      data-target="#addCategoryModal"
                    >
                      <i class="fas fa-plus"></i> Thêm loại sản phẩm
                    </button>
                  </div>
                  <div class="card-body">
                    <!-- Bảng loại sản phẩm -->
                    <table
                      id="categoryTable"
                      class="table table-bordered table-hover"
                    >
                      <thead class="bg-light">
                        <tr>
                          <th>ID</th>
                          <th>Tên loại sản phẩm</th>
                          <th class="text-center">Hành động</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% categories.forEach(category => { %>
                        <tr>
                          <td><%= category._id %></td>
                          <td><%= category.name %></td>
                          <td class="text-center">
                            <button
                              class="btn btn-warning btn-sm edit-btn"
                              data-id="<%= category._id %>"
                              data-name="<%= category.name %>"
                            >
                              <i class="fas fa-edit"></i> Sửa
                            </button>
                            <!-- <button class="btn btn-danger btn-sm delete-btn" data-id="<%= category._id %>">
                            <i class="fas fa-trash-alt"></i> Xóa
                          </button> -->
                          </td>
                        </tr>
                        <% }) %>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
      </div>

      <!-- Modal Thêm Loại Sản Phẩm -->
      <div class="modal fade" id="addCategoryModal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header bg-primary text-white">
              <h5 class="modal-title">Thêm loại sản phẩm</h5>
              <button
                type="button"
                class="close text-white"
                data-dismiss="modal"
              >
                &times;
              </button>
            </div>
            <div class="modal-body">
              <form id="addCategoryForm">
                <div class="form-group">
                  <label for="categoryName">Tên loại sản phẩm</label>
                  <input
                    type="text"
                    id="categoryName"
                    class="form-control"
                    required
                  />
                </div>
                <button type="submit" class="btn btn-primary btn-block">
                  Thêm
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Control Sidebar -->
      <aside class="control-sidebar control-sidebar-dark">
        <!-- Control sidebar content goes here -->
      </aside>
      <!-- /.control-sidebar -->
    </div>
    <!-- ./wrapper -->

    <!-- jQuery -->
    <script src="/plugins/jquery/jquery.min.js"></script>
    <!-- jQuery UI 1.11.4 -->
    <script src="/plugins/jquery-ui/jquery-ui.min.js"></script>
    <!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
    <script>
      $.widget.bridge("uibutton", $.ui.button);
    </script>
    <!-- Bootstrap 4 -->
    <script src="/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- ChartJS -->
    <script src="/plugins/chart.js/Chart.min.js"></script>
    <!-- Sparkline -->
    <script src="/plugins/sparklines/sparkline.js"></script>
    <!-- JQVMap -->
    <script src="/plugins/jqvmap/jquery.vmap.min.js"></script>
    <script src="/plugins/jqvmap/maps/jquery.vmap.usa.js"></script>
    <!-- jQuery Knob Chart -->
    <script src="/plugins/jquery-knob/jquery.knob.min.js"></script>
    <!-- daterangepicker -->
    <script src="/plugins/moment/moment.min.js"></script>
    <script src="/plugins/daterangepicker/daterangepicker.js"></script>
    <!-- Tempusdominus Bootstrap 4 -->
    <script src="/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
    <!-- Summernote -->
    <script src="/plugins/summernote/summernote-bs4.min.js"></script>
    <!-- overlayScrollbars -->
    <script src="/plugins/overlayScrollbars/js/jquery.overlayScrollbars.min.js"></script>
    <!-- AdminLTE App -->
    <script src="/dist/js/adminlte.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      $(document).ready(function () {
        // Kích hoạt DataTables
        $("#categoryTable").DataTable({
          order: [],
          language: {
            search: "Tìm kiếm:",
            lengthMenu: "Hiển thị _MENU_ loại sản phẩm",
            zeroRecords: "Không tìm thấy loại sản phẩm nào",
            info: "Hiển thị _START_ đến _END_ của _TOTAL_ loại sản phẩm",
            infoEmpty: "Không có dữ liệu",
            paginate: {
              next: "Tiếp",
              previous: "Trước",
            },
          },
        });

        // Thêm loại sản phẩm
        $("#addCategoryForm").submit(function (e) {
          e.preventDefault();
          var categoryName = $("#categoryName").val();

          if (!categoryName.trim()) {
            Swal.fire(
              "Lỗi!",
              "Tên loại sản phẩm không được để trống.",
              "error"
            );
            return;
          }

          // Gửi dữ liệu lên server (AJAX)
          $.post(
            "/v1/category/add-category",
            { name: categoryName },
            function (response) {
              Swal.fire(
                "Thành công!",
                "Loại sản phẩm đã được thêm.",
                "success"
              ).then(() => {
                location.reload();
              });
            }
          ).fail(() => {
            Swal.fire("Lỗi!", "Không thể thêm loại sản phẩm.", "error");
          });
        });

        // Xóa loại sản phẩm
        $(".delete-btn").click(function () {
          var categoryId = $(this).data("id");
          console.log("ID cần xóa:", categoryId); // Debug ID

          Swal.fire({
            title: "Xác nhận?",
            text: "Bạn có chắc muốn xóa loại sản phẩm này?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Xóa",
            cancelButtonText: "Hủy",
          }).then((result) => {
            if (result.isConfirmed) {
              $.ajax({
                url: "/v1/category/delete-category/" + categoryId, // Thay đổi URL phù hợp với route
                type: "DELETE", // Sử dụng method DELETE
                success: function (response) {
                  console.log("Xóa thành công:", response); // Kiểm tra response từ server
                  Swal.fire(
                    "Đã xóa!",
                    "Loại sản phẩm đã bị xóa.",
                    "success"
                  ).then(() => {
                    location.reload();
                  });
                },
                error: function (xhr, status, error) {
                  console.error("Lỗi xóa:", xhr.responseText); // Debug lỗi server
                  Swal.fire("Lỗi!", "Không thể xóa loại sản phẩm.", "error");
                },
              });
            }
          });
        });

        // Sửa loại sản phẩm
        $(".edit-btn").click(function () {
          var categoryId = $(this).data("id");
          var categoryName = $(this).data("name");

          Swal.fire({
            title: "Chỉnh sửa loại sản phẩm",
            input: "text",
            inputValue: categoryName,
            showCancelButton: true,
            confirmButtonText: "Lưu",
            cancelButtonText: "Hủy",
          }).then((result) => {
            if (result.isConfirmed && result.value.trim()) {
              $.ajax({
                url: "/v1/category/update-category/" + categoryId, // Đúng với route backend
                type: "PUT", // Sử dụng method PUT
                contentType: "application/json",
                data: JSON.stringify({ name: result.value.trim() }), // Gửi dữ liệu dưới dạng JSON
                success: function (response) {
                  Swal.fire(
                    "Thành công!",
                    "Loại sản phẩm đã được cập nhật.",
                    "success"
                  ).then(() => {
                    location.reload();
                  });
                },
                error: function (xhr, status, error) {
                  console.error("Lỗi cập nhật:", xhr.responseText); // Debug lỗi server
                  Swal.fire(
                    "Lỗi!",
                    "Không thể cập nhật loại sản phẩm.",
                    "error"
                  );
                },
              });
            }
          });
        });
      });
    </script>
    <!-- Script Chat (tương tự code chat cũ) -->
    <script>
      const socket = io();
      const adminId = "admin";
      const adminUsername = "Admin";

      let selectedUser = null;
      let messages = {};
      let unreadUsers = {};
      let notifications = [];

      const chatUserList = document.getElementById("chat-user-list");
      const chatTitle = document.getElementById("chat-title");
      const chatContainer = document.getElementById("chat");
      const messageInput = document.getElementById("message-input");
      const sendButton = document.getElementById("send-btn");
      const notificationBadge = document.getElementById("notif-badge");
      const notifHeader = document.getElementById("notif-header");
      const notifItems = document.getElementById("notif-items");
      const markAllBtn = document.getElementById("mark-all-read");

      // --- LocalStorage helpers ---
      function getReadIds() {
        return JSON.parse(localStorage.getItem("readNotifications") || "[]");
      }
      function addReadId(id) {
        const arr = getReadIds();
        if (!arr.includes(id)) {
          arr.push(id);
          localStorage.setItem("readNotifications", JSON.stringify(arr));
        }
      }

      // --- Socket registration ---
      socket.emit("register", {
        userId: adminId,
        username: adminUsername,
        isAuthenticated: true,
      });

      // --- Load & render notifications from server + localStorage flags ---
      async function loadNotifications() {
        const resp = await fetch("/v1/notifications");
        const notes = await resp.json();
        // sử dụng đúng flag read từ server
        notifications = notes.map((n) => ({
          _id: n._id,
          userId: n.userId,
          username: n.username,
          timestamp: new Date(n.createdAt).toLocaleString("vi-VN"),
          read: n.read, // lấy trực tiếp
        }));
        updateBadgeAndHeader();
        renderNotificationDropdown();
      }

      // thêm notification mới: POST trước, rồi unshift kết quả
      async function addNotification(n) {
        try {
          const resp = await fetch("/v1/notifications", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              userId: n.userId,
              username: n.username,
              title: "Tin nhắn mới",
              message: "Bạn có tin nhắn mới từ " + n.username,
              read: false,
            }),
          });
          const saved = await resp.json();
          // giờ mới thêm vào mảng
          notifications.unshift({
            _id: saved._id,
            userId: saved.userId,
            username: saved.username,
            timestamp: new Date(saved.createdAt).toLocaleString("vi-VN"),
            read: saved.read,
          });
          renderNotificationDropdown();
        } catch (err) {
          console.error("Failed to save notification:", err);
        }
      }

      // --- Cập nhật badge và header ---
      function updateBadgeAndHeader() {
        const unread = notifications.filter((n) => !n.read).length;
        notificationBadge.innerText = unread > 0 ? unread : "";
        notifHeader.innerText = `${unread} Notifications`;
      }

      // render và gán click
      function renderNotificationDropdown() {
        const unread = notifications.filter((n) => !n.read).length;
        notificationBadge.innerText = unread > 0 ? unread : "";
        notifHeader.innerText = `${unread} Notifications`;
        notifItems.innerHTML = notifications
          .map(
            (n, i) => `
  <a href="#" class="dropdown-item ${n.read ? "" : "bg-light"}"
     data-index="${i}"
     data-id="${n._id}"
     data-user-id="${n.userId}"
     data-username="${n.username}">
    <i class="fas fa-envelope mr-2"></i>
    <strong>${n.username}</strong> đã gửi tin nhắn mới
    <span class="float-right text-muted text-sm">${n.timestamp}</span>
  </a>
  <div class="dropdown-divider"></div>
`
          )
          .join("");

        notifItems.querySelectorAll("a.dropdown-item").forEach((el) => {
          el.onclick = async (e) => {
            e.preventDefault();
            const idx = +el.dataset.index;
            const note = notifications[idx];
            const notifId = el.dataset.id;
            const userId = el.dataset.userId;
            const username = el.dataset.username;

            if (!note.read) {
              // đánh dấu trên server
              await fetch(`/v1/notifications/${notifId}`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ read: true }),
              });
              // cập nhật local
              note.read = true;
            }

            // chuyển sang chat
            document
              .getElementById("chat-tab-btn")
              .addEventListener("click", () => {
                // 1) local update ngay lập tức
                notifications.forEach((n) => (n.read = true));

                // 2) cập nhật badge + dropdown
                updateBadgeAndHeader();
                renderNotificationDropdown();

                // 3) sync lên server (PATCH) nhưng không block UI
                notifications
                  .filter((n) => n._id) // chỉ những đã có _id
                  .forEach((n) => {
                    fetch(`/v1/notifications/${n._id}`, {
                      method: "PATCH",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({ read: true }),
                    }).catch(console.error);
                  });
              });
            document.getElementById("chat-tab-btn").click();
            selectUser(userId, username);
            selectUser(userId, username);
            renderNotificationDropdown();
          };
        });
      }
      loadNotifications();
      // --- Chat user list & selection ---
      socket.on("updateUserList", (users) => {
        chatUserList.innerHTML = "<h3 class='mt-2'>User List</h3>";
        users
          .filter((u) => u.userId !== adminId)
          .forEach((u) => {
            const div = document.createElement("div");
            div.classList.add("user-item");
            div.dataset.id = u.userId;
            if (unreadUsers[u.userId]) div.classList.add("new-message");
            div.innerHTML = `<div class="user-info">${u.username}</div><button class="hide-btn">Ẩn</button>`;
            div.querySelector(".user-info").onclick = () =>
              selectUser(u.userId, u.username);
            div.querySelector(".hide-btn").onclick = () => {
              socket.emit("hideChatWithUser", u.userId);
              div.remove();
            };
            chatUserList.appendChild(div);
          });
      });

      async function markRead(idx) {
        try {
          const res = await fetch("/v1/notifications/markAsRead", {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id: notifications[idx]._id }),
          });
          if (!res.ok) throw new Error("Mark failed");
          const updated = await res.json();
          // SỬA: lấy luôn trạng thái read từ server để đồng nhất
          notifications[idx].read = !!(updated.read ?? updated.isRead);
        } catch (e) {
          console.error("❌ markRead:", e);
          // nếu lỗi, vẫn giữ client-side là đã đọc để khỏi nhảy badge
          notifications[idx].read = true;
        }
        await loadNotifications(); // đảm bảo đồng bộ dữ liệu
      }

      markAllBtn.onclick = async (e) => {
        e.preventDefault();
        try {
          const res = await fetch("/v1/notifications/mark-all-read", {
            method: "PUT",
          });
          if (!res.ok) throw new Error("Mark all failed");
          notifications.forEach((n) => (n.read = true));
          updateBadgeAndHeader();
          renderNotificationDropdown();
        } catch (e) {
          console.error("❌ mark-all-read:", e);
        }
      };
      function renderDropdown() {
        const unreadCount = notifications.filter((n) => !n.read).length;
        notifHeader.innerText = `${unreadCount} Notifications`;
        notifItems.innerHTML = notifications
          .map(
            (n, i) => `
    <a href="#" class="dropdown-item ${
      n.read ? "" : "bg-light"
    }" data-idx="${i}">
      <i class="fas fa-${
        n.type === "message"
          ? "envelope"
          : n.type === "comment"
          ? "comment"
          : "box"
      } mr-2"></i>
      <strong>${n.username}</strong> ${n.message}
      <span class="float-right text-muted text-sm">
        ${new Date(n.timestamp).toLocaleTimeString()}
      </span>
    </a>
    <div class="dropdown-divider"></div>
  `
          )
          .join("");

        notifItems.querySelectorAll("a.dropdown-item").forEach((el) => {
          el.onclick = async (e) => {
            e.preventDefault();
            const idx = +el.dataset.idx;
            if (!notifications[idx].read) {
              // gọi API để đánh dấu là đã đọc
              await markRead(idx);
              // và load lại để đảm bảo dữ liệu đồng bộ
              await loadNotifications();
            }
            const n = notifications[idx];
            selectUser(n.userId, n.username);
          };
        });
      }

      async function selectUser(id, name) {
        selectedUser = id;
        chatTitle.innerText = `Chat với ${name}`;
        chatContainer.innerHTML = "";
        delete unreadUsers[id];

        // Bỏ highlight new-message
        document
          .querySelector(`[data-id="${id}"]`)
          ?.classList.remove("new-message");

        // *** đánh dấu read ngay khi click user
        await markNotificationsReadForUser(id);

        // Hiển thị history nếu đã load
        if (messages[id]) renderMessages(id);
        // rồi fetch thêm nếu cần
        socket.emit("getMessages", id);
      }

      socket.on("chatHistory", ({ userId, messages: hist }) => {
        messages[userId] = hist;
        if (userId === selectedUser) renderMessages(userId);
      });

      async function markNotificationsReadForUser(userId) {
        // Lấy ra danh sách cần mark
        const toMark = notifications.filter(
          (n) => n.userId === userId && !n.read && n._id
        );
        if (toMark.length === 0) return;

        // -- 1) Optimistic update trên client --
        toMark.forEach((n) => (n.read = true));
        updateBadgeAndHeader();
        renderNotificationDropdown();

        // -- 2) Gửi PATCH song song để sync server --
        try {
          await Promise.all(
            toMark.map((n) =>
              fetch(`/v1/notifications/${n._id}`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ read: true }),
              })
            )
          );
        } catch (err) {
          console.error("Failed to patch notifications:", err);
        }
      }

      socket.on("receivePrivateMessage", (data) => {
        const senderId = data.sender;
        const senderName =
          senderId === adminId ? adminUsername : data.senderName;
        const chatPartner = senderId === adminId ? selectedUser : senderId;

        messages[chatPartner] = messages[chatPartner] || [];
        messages[chatPartner].push({
          senderName,
          message: data.message,
          timestamp: Date.now(),
        });

        if (selectedUser === chatPartner) {
          displayMessage(senderName, data.message);
        } else {
          unreadUsers[chatPartner] = true;
          document
            .querySelector(`[data-id="${chatPartner}"]`)
            ?.classList.add("new-message");
          // thêm notification
          addNotification({
            userId: senderId,
            username: senderName,
            timestamp: new Date().toLocaleString("vi-VN"),
          });
        }
      });

      // --- Thêm notification mới cả front+API ---
      async function addNotification(n) {
        const local = { ...n, read: false, _id: null };
        notifications.unshift(local);
        updateBadgeAndHeader();
        renderNotificationDropdown();

        try {
          const resp = await fetch("/v1/notifications", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              userId: n.userId,
              username: n.username,
              title: "Tin nhắn mới",
              message: "Bạn có tin nhắn mới từ " + n.username,
              read: false,
            }),
          });
          const saved = await resp.json();
          local._id = saved._id;
        } catch (err) {
          console.error("Failed to save notification:", err);
        }
      }

      // --- gửi tin nhắn từ admin ---
      sendButton.onclick = sendMessage;
      function sendMessage() {
        if (!selectedUser) return alert("Chọn một user để nhắn tin!");
        const msg = messageInput.value.trim();
        if (!msg) return;
        socket.emit("sendPrivateMessage", {
          sender: adminId,
          receiver: selectedUser,
          message: msg,
        });
        messages[selectedUser].push({
          senderName: adminUsername,
          message: msg,
          timestamp: Date.now(),
        });
        displayMessage(adminUsername, msg);
        messageInput.value = "";
      }

      function displayMessage(senderName, message) {
        const d = document.createElement("div");
        d.classList.add("message");
        d.innerHTML = `<strong>${senderName}:</strong> ${message}`;
        chatContainer.appendChild(d);
        chatContainer.scrollTop = chatContainer.scrollHeight;
      }
      function renderMessages(uid) {
        chatContainer.innerHTML = "";
        messages[uid].forEach((m) => displayMessage(m.senderName, m.message));
      }

      // toggle dropdown
      document
        .querySelector("#nav-notif .nav-link")
        .addEventListener("click", (e) => {
          e.preventDefault();
          const menu = document.querySelector("#notif-menu");
          menu.style.display =
            menu.style.display === "block" ? "none" : "block";
        });

      // initial load
      loadNotifications();
    </script>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      window.__ADMIN_ID__ = "<%= adminId %>";
      window.__ADMIN_NAME__ = "<%= adminName %>";
    </script>
    <script src="../public/global-notification.js"></script>
  </body>
</html>
